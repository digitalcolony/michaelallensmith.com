---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";

const reviews = await getCollection("reviews");
const reviewData = reviews.map((review) => review.data);
// sort by date descending
reviewData.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());

// Count movies and TV shows
const finishedReviews = reviewData.filter((review) => review.finished == "Yes");
const movieCount = finishedReviews.filter((review) => review.showType === "Movie").length;
const tvShowCount = finishedReviews.filter((review) => review.showType !== "Movie").length;
---

<Layout
	title="TV and Movie Reviews ðŸ“º"
	url="/watched/"
	description="Keeping track of the TV shows and movies I've watched."
>
	<main class="container">
		<p>Keeping track of the TV shows ðŸ“º and movies ðŸŽ¦ I've watched since 2021.</p>

		<!-- Search and counts container -->
		<div class="search-container">
			<form id="searchForm" onsubmit="return false;" class="search-form">
				<input type="text" id="searchInput" placeholder="Search..." />
				<span id="noResultsMessage" class="no-results-message" style="display: none;"
					>No results</span
				>
			</form>
			<div class="count-label">
				<span>ðŸŽ¦ Movies: {movieCount}</span>
				<span>ðŸ“º TV Shows: {tvShowCount}</span>
			</div>
		</div>

		<!-- Scrollable table container -->
		<div class="table-container">
			<table>
				<thead>
					<tr>
						<th>Type</th>
						<th class="sortable" data-sort="name">Name <span class="sort-arrow"></span></th>
						<th class="sortable" data-sort="rating">Rating <span class="sort-arrow"></span></th>
						<th class="sortable hide-on-mobile" data-sort="watched"
							>Watched <span class="sort-arrow"></span></th
						>
					</tr>
				</thead>

				<tbody id="reviewTableBody">
					{
						reviewData
							.filter((review) => review.finished == "Yes")
							.map((review) => (
								<tr>
									<td>{review.showType === "Movie" ? "ðŸŽ¦" : "ðŸ“º"}</td>
									<td>{review.showName}</td>
									<td>{review.rating}</td>
									<td class="hide-on-mobile">{new Date(review.timestamp).getFullYear()}</td>
								</tr>
							))
					}
				</tbody>
			</table>
		</div>
	</main>
</Layout>

<style>
	/* Scrollable table container */
	.table-container {
		max-height: 500px;
		overflow-y: auto;
	}

	/* Scrollbar styling */
	.table-container::-webkit-scrollbar {
		width: 12px; /* Adjust the width as needed */
	}

	.table-container::-webkit-scrollbar-track {
		background: #f1f1f1; /* Color of the tracking area */
	}

	.table-container::-webkit-scrollbar-thumb {
		background: #888; /* Color of the thumb */
	}

	.table-container::-webkit-scrollbar-thumb:hover {
		background: #555; /* Color of the thumb on hover */
	}

	table thead th {
		position: sticky;
		top: 0;
		background-color: #fdfff5;
		z-index: 1;
	}

	/* Sortable column styling */
	.sortable {
		cursor: pointer;
		user-select: none;
		position: relative;
	}

	.sortable:hover {
		background-color: #f0f0f0;
	}

	.sort-arrow {
		margin-left: 5px;
		font-size: 0.8em;
		opacity: 0.3;
		transition: opacity 0.2s;
	}

	.sort-arrow.sort-active {
		opacity: 1;
	}

	/* Search and counts styling */
	.search-container {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1rem;
	}

	.search-form {
		flex: 1;
		max-width: 300px;
		position: relative;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.no-results-message {
		color: #888;
		font-size: 0.9em;
		font-style: italic;
		white-space: nowrap;
	}

	.count-label {
		display: flex;
		gap: 1rem;
		margin-right: 1rem; /* Add margin to the right */
		flex-direction: row; /* Default to row */
	}

	.count-label span {
		white-space: nowrap;
	}

	/* Media query for mobile devices */
	@media (max-width: 600px) {
		.search-container {
			flex-direction: column; /* Stack the form and counts */
			align-items: flex-start; /* Align items to the start */
		}

		.count-label {
			flex-direction: row; /* Display counts in a row */
			margin-right: 0; /* Remove right margin */
			margin-top: 0.5rem; /* Add some space between search and counts */
		}

		.hide-on-mobile {
			display: none; /* Hide on mobile */
		}
	}
</style>

<script is:inline>
	document.addEventListener("DOMContentLoaded", function () {
		const searchInput = document.getElementById("searchInput");
		const searchForm = document.getElementById("searchForm");
		let currentSort = { column: "watched", direction: "desc" };
		let allReviewData = [];

		// Store the original data for sorting
		const tableBody = document.getElementById("reviewTableBody");
		if (tableBody) {
			const rows = Array.from(tableBody.getElementsByTagName("tr"));
			allReviewData = rows.map((row) => {
				const cells = row.getElementsByTagName("td");
				return {
					element: row,
					type: cells[0].textContent.trim(),
					name: cells[1].textContent.trim(),
					rating: cells[2].textContent.trim(),
					watched: cells.length > 3 ? cells[3].textContent.trim() : "",
				};
			});
		}

		// Search functionality
		if (searchInput) {
			searchInput.addEventListener("keyup", filterTable);
			searchInput.addEventListener("input", filterTable);
		}

		if (searchForm) {
			searchForm.addEventListener("submit", function (e) {
				e.preventDefault();
				filterTable();
			});
		}

		// Sorting functionality
		const sortableHeaders = document.querySelectorAll(".sortable");
		sortableHeaders.forEach((header) => {
			header.addEventListener("click", function () {
				const sortType = this.getAttribute("data-sort");
				sortTable(sortType);
			});
		});

		// Initialize the default sort arrow for "watched" column
		updateSortArrows("watched", "desc");

		function sortTable(column) {
			// Determine sort direction
			let direction = "asc";
			if (currentSort.column === column) {
				direction = currentSort.direction === "asc" ? "desc" : "asc";
			} else {
				// Default directions for each column
				if (column === "rating") {
					direction = "desc"; // 5 to 1 star default
				} else if (column === "watched") {
					direction = "desc"; // newest first default
				} else {
					direction = "asc"; // name ascending default
				}
			}

			currentSort = { column, direction };

			// Update arrow indicators
			updateSortArrows(column, direction);

			// Sort the data
			const sortedData = [...allReviewData].sort((a, b) => {
				let aVal, bVal;

				switch (column) {
					case "name":
						aVal = a.name.toLowerCase();
						bVal = b.name.toLowerCase();
						break;
					case "rating":
						// Sort by rating length (5 stars > 4 stars > etc.) then by content
						aVal = a.rating.length * 1000 + a.rating.charCodeAt(0);
						bVal = b.rating.length * 1000 + b.rating.charCodeAt(0);
						break;
					case "watched":
						aVal = parseInt(a.watched) || 0;
						bVal = parseInt(b.watched) || 0;
						break;
					default:
						return 0;
				}

				if (direction === "asc") {
					return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
				} else {
					return aVal < bVal ? 1 : aVal > bVal ? -1 : 0;
				}
			});

			// Clear and rebuild table body
			const tbody = document.getElementById("reviewTableBody");
			tbody.innerHTML = "";
			sortedData.forEach((item) => {
				tbody.appendChild(item.element);
			});

			// Reapply current filter if any
			if (searchInput && searchInput.value.trim() !== "") {
				filterTable();
			}
		}

		function updateSortArrows(activeColumn, direction) {
			// Reset all arrows
			const arrows = document.querySelectorAll(".sort-arrow");
			arrows.forEach((arrow) => {
				arrow.className = "sort-arrow";
				arrow.textContent = "";
			});

			// Set active arrow
			const activeHeader = document.querySelector(`[data-sort="${activeColumn}"] .sort-arrow`);
			if (activeHeader) {
				activeHeader.className = `sort-arrow sort-active sort-${direction}`;
				activeHeader.textContent = direction === "asc" ? "â–²" : "â–¼";
			}
		}

		function filterTable() {
			const input = document.getElementById("searchInput");
			if (!input) return;
			const filter = input.value.toLowerCase();
			const tableBody = document.getElementById("reviewTableBody");
			if (!tableBody) return;

			const rows = tableBody.getElementsByTagName("tr");
			let visibleCount = 0;

			for (let i = 0; i < rows.length; i++) {
				const cells = rows[i].getElementsByTagName("td");
				let match = false;

				for (let j = 0; j < cells.length; j++) {
					if (cells[j].textContent.toLowerCase().includes(filter)) {
						match = true;
						break;
					}
				}

				rows[i].style.display = match ? "" : "none";
				if (match) {
					visibleCount++;
				}
			}

			// Show/hide "No results" message
			const noResultsMessage = document.getElementById("noResultsMessage");
			const hasSearchTerm = filter.trim() !== "";

			if (noResultsMessage) {
				if (hasSearchTerm && visibleCount === 0) {
					noResultsMessage.style.display = "inline";
				} else {
					noResultsMessage.style.display = "none";
				}
			}
		}
	});
</script>
